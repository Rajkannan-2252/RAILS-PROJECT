<!-- app/views/monitoring/status_page.html.erb -->
<div class="status-page">
  <div class="status-header">
    <div class="logo">
      <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M7 7L33 33M7 33L33 7" stroke="#0A1172" stroke-width="8" stroke-linecap="round"/>
      </svg>
      <h1>XaasIO Status Page</h1>
    </div>
  </div>

  <% 
    # Calculate the overall system status
    all_up = true
    partially_degraded = false
    all_down = true
    
    if @status_data && @status_data['publicGroupList']
      @status_data['publicGroupList'].each do |group|
        group['monitorList'].each do |monitor|
          uptime = monitor['uptime'] || (monitor['active'] ? 100 : 0)
          if uptime > 0
            # Any service with uptime > 0 is considered up
            all_down = false
          else
            # Only services with 0% uptime are considered down
            all_up = false
          end
        end
      end
    end

    
    system_status = all_up ? "All Systems Operational" : 
                    all_down ? "Major Outage" :
                    "Partially Degraded Service"
                    
    status_icon = all_up ? "✓" : 
                  all_down ? "✕" : 
                  "!"
                  
    # Get the current time for the last updated display
    current_time = Time.now
    current_time_formatted = current_time.strftime("%Y-%m-%d %H:%M:%S")
  %>

  <div class="system-status-bar <%= all_up ? 'status-good' : all_down ? 'status-critical' : 'status-warning' %>">
    <div class="status-icon"><%= status_icon %></div>
    <div class="status-text"><%= system_status %></div>
  </div>

  <section class="services-section">
    <h2>Services</h2>

    <div class="services-list">
      <% if @status_data && @status_data['publicGroupList'] %>
        <% @status_data['publicGroupList'].each do |group| %>
          <% group['monitorList'].each do |monitor| %>
            <% 
              # Get monitor data
              monitor_name = monitor['name']
              uptime_percent = monitor['uptime'] || 0.0
              
              # Determine background color for service row
              row_bg_class = ''
              
              # Determine if service is currently up
              is_currently_up = if monitor['heartbeatList'] && monitor['heartbeatList'].any?
                                 monitor['heartbeatList'].last['status'] == 1
                               else
                                 uptime_percent > 0
                               end
              
              # Set badge class based on current status
              badge_class = is_currently_up ? 'status-good' : 'status-critical'
              
              # Format uptime percentage with 2 decimal places if not 100%
              uptime_formatted = uptime_percent == 100 ? "100%" : "#{uptime_percent.round(2)}%"
              
              # Get heartbeat data
              heartbeat_list = monitor['heartbeatList'] || []
              
              # Calculate minutes ago for display
              service_hash = monitor_name.hash.abs
              time_options = [13, 20, 40, 47]
              minutes_ago = time_options[service_hash % time_options.size]
            %>
            
            <div class="service-row <%= row_bg_class %>">
              <div class="service-status">
                <span class="status-badge <%= badge_class %>">
                  <%= uptime_formatted %>
                </span>
                <span class="service-name"><%= monitor_name %></span>
              </div>
              
              <div class="timeline-wrapper">
                <div class="timeline-container">
                  <% 
                    # If we have heartbeat data, use it for the timeline
                    if heartbeat_list.any?
                      heartbeat_list.last(40).each do |hb| 
                  %>
                    <span class="timeline-bar timeline-<%= hb['status'] == 1 ? 'up' : 'down' %>"></span>
                  <% 
                      end
                    else
                      # No heartbeat data, create status bars based on uptime
                      # For services with less than 100% uptime, show some failures at the end
                      if uptime_percent < 100 && uptime_percent > 0
                        # Calculate how many bars should be down based on uptime percentage
                        # For minor issues (99%+ uptime), show just a few bars down
                        # For more serious issues, show more bars down
                        down_bars = if uptime_percent >= 99
                                      # Just a few red bars for minor issues
                                      [8, (40 * (100 - uptime_percent) / 100).round].max
                                    elsif uptime_percent >= 90
                                      # More red bars for moderate issues
                                      [12, (40 * (100 - uptime_percent) / 100).round].max
                                    else
                                      # Even more red bars for major issues
                                      [20, (40 * (100 - uptime_percent) / 100).round].max
                                    end
                        
                        # Cap at maximum 40 bars
                        down_bars = [down_bars, 40].min
                        up_bars = 40 - down_bars
                        
                        # First show the up bars
                        up_bars.times do %>
                          <span class="timeline-bar timeline-up"></span>
                        <% end %>
                        
                        <% # Then show the down bars
                        down_bars.times do %>
                          <span class="timeline-bar timeline-down"></span>
                        <% end %>
                      <% else
                        # For services that are completely down (0%) or fully up (100%)
                        status_class = uptime_percent > 0 ? 'up' : 'down'
                        40.times do 
                      %>
                        <span class="timeline-bar timeline-<%= status_class %>"></span>
                      <% 
                        end
                      end
                    end 
                  %>
                </div>
                
                <div class="timeline-labels">
                  <span class="time-ago"><%= minutes_ago %>m ago</span>
                  <span class="time-now">now</span>
                </div>
              </div>
            </div>
          <% end %>
        <% end %>
      <% else %>
        <div class="no-data">
          <p>Unable to fetch monitoring data. Please try again later.</p>
        </div>
      <% end %>
    </div>
  </section>

  <div class="status-footer">
    <div class="last-updated" id="last-updated-time">
      Last Updated: <%= current_time_formatted %>
    </div>
    <div class="refresh-timer">
      Refresh in: <span id="countdown">05:00</span>
    </div>
  </div>
</div>

<style>
  .status-page {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    color: #333;
    background-color: #f9fafb;
  }
  
  .status-header {
    margin-bottom: 20px;
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 15px;
  }
  
  .logo {
    display: flex;
    align-items: center;
  }
  
  .logo h1 {
    font-size: 1.75rem;
    font-weight: 600;
    margin: 0 0 0 15px;
  }
  
  
  .system-status-bar {
    display: flex;
    align-items: center;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }
  
  .system-status-bar.status-good {
    background-color: #22c55e;
    color: white;
  }
  
  .system-status-bar.status-warning {
    background-color: #f59e0b;
    color: white;
  }
  
  .system-status-bar.status-critical {
    background-color: #ef4444;
    color: white;
  }
  
  .status-icon {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: inherit;
    margin-right: 15px;
    background-color: rgba(255, 255, 255, 0.2);
  }
  
  .status-text {
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .services-section {
    margin-bottom: 30px;
  }
  
  .services-section h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 15px;
  }
  
  .services-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  
  .service-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: white;
    border-radius: 8px;
    padding: 15px 20px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
  
  .highlight-bg {
    background-color: #f0fdf4;
  }
  
  .service-status {
    display: flex;
    align-items: center;
    min-width: 250px;
    flex-shrink: 0;
  }
  
  .status-badge {
    display: inline-block;
    min-width: 65px;
    text-align: center;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: bold;
    color: white;
    margin-right: 15px;
  }
  
  .status-good {
    background-color: #22c55e;
  }
  
  .status-warning {
    background-color: #22c55e;
  }
  
  .status-critical {
    background-color: #ef4444;
  }
  
  .service-name {
    font-weight: 500;
    font-size: 1rem;
  }
  
  .timeline-wrapper {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    max-width: 40%;
  }
  
  .timeline-container {
    display: flex;
    gap: 2px;
    margin-bottom: 4px;
    height: 20px;
  }
  
  .timeline-bar {
    flex: 1;
    height: 100%;
    border-radius: 2px;
  }
  
  .timeline-up {
    background-color: #22c55e;
  }
  
  .timeline-down {
    background-color: #ef4444;
  }
  
  .timeline-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    color: #6b7280;
  }
  
  .time-ago {
    text-align: left;
  }
  
  .time-now {
    text-align: right;
  }
  
  .no-data {
    background-color: #fff3cd;
    color: #856404;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #ffeeba;
  }
  
  .status-footer {
    margin-top: 30px;
    padding-top: 15px;
    text-align: center;
    border-top: 1px solid #e5e7eb;
  }
  
  .last-updated,
  .refresh-timer {
    color: #6b7280;
    font-size: 0.9rem;
    margin-bottom: 5px;
  }
  
  /* Added style for tooltip */
  .timeline-tooltip {
    position: fixed;
    background-color: #333;
    color: white;
    padding: 5px 8px;
    border-radius: 4px;
    font-size: 12px;
    z-index: 1000;
    pointer-events: none;
  }
  
  @media (max-width: 768px) {
    .service-row {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .service-status {
      margin-bottom: 10px;
      width: 100%;
    }
    
    .timeline-wrapper {
      width: 100%;
      max-width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Store the current time
    let currentLastUpdatedTime = new Date();
    
    // Update the last updated time display
    function updateLastUpdatedTime() {
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      const hours = String(now.getHours()).padStart(2, '0');
      const minutes = String(now.getMinutes()).padStart(2, '0');
      const seconds = String(now.getSeconds()).padStart(2, '0');
      
      const formattedTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
      currentLastUpdatedTime = now;
      
      const lastUpdatedElement = document.getElementById('last-updated-time');
      if (lastUpdatedElement) {
        lastUpdatedElement.textContent = 'Last Updated: ' + formattedTime;
      }
    }
    
    // Update the time when the page loads
    updateLastUpdatedTime();
    
    // Countdown timer
    let countdown = document.getElementById('countdown');
    let minutes = 5;
    let seconds = 0;
    
    // Initial display
    countdown.textContent = minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    
    const countdownInterval = setInterval(function() {
      if (seconds === 0) {
        if (minutes === 0) {
          // Refresh the page
          window.location.reload();
          return;
        }
        minutes--;
        seconds = 59;
      } else {
        seconds--;
      }
      
      countdown.textContent = minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    }, 1000);
    
    // Timeline hover functionality
    document.querySelectorAll('.timeline-container').forEach(function(container) {
      container.addEventListener('mousemove', function(e) {
        // If currentLastUpdatedTime is not set, exit
        if (!currentLastUpdatedTime) return;
        
        // Get minutes ago value
        const minutesAgo = parseInt(container.closest('.timeline-wrapper')
          .querySelector('.time-ago').textContent);
        
        // Create a copy of the current time
        const updateDate = new Date(currentLastUpdatedTime);
        
        // Calculate the past date (current time minus minutesAgo)
        const pastDate = new Date(updateDate);
        pastDate.setMinutes(pastDate.getMinutes() - minutesAgo);
        
        // Calculate position in the timeline
        const rect = container.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const containerWidth = rect.width;
        const position = mouseX / containerWidth;
        
        // Calculate time based on position (0 = pastDate, 1 = updateDate)
        const timeRange = updateDate.getTime() - pastDate.getTime();
        const timeAtPosition = pastDate.getTime() + (position * timeRange);
        const dateAtPosition = new Date(timeAtPosition);
        
        // Format time as string
        const formattedTime = formatDate(dateAtPosition);
        
        // Create or update tooltip
        let tooltip = document.querySelector('.timeline-tooltip');
        if (!tooltip) {
          tooltip = document.createElement('div');
          tooltip.className = 'timeline-tooltip';
          document.body.appendChild(tooltip);
        }
        
        tooltip.textContent = formattedTime;
        tooltip.style.top = (e.clientY + 10) + 'px';
        tooltip.style.left = (e.clientX + 10) + 'px';
      });
      
      container.addEventListener('mouseleave', function() {
        const tooltip = document.querySelector('.timeline-tooltip');
        if (tooltip) {
          tooltip.remove();
        }
      });
    });
    
    // Helper function to format date in yyyy-mm-dd hh:mm:ss format
    function formatDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      const seconds = String(date.getSeconds()).padStart(2, '0');
      
      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }
    
    // Set up a refresh for the last updated time
    setInterval(updateLastUpdatedTime, 300000); // Update every 5 minutes
  });
</script>